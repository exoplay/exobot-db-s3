require("source-map-support").install(),require("regenerator-runtime/runtime"),function(e,r){for(var t in r)e[t]=r[t]}(exports,function(e){function r(n){if(t[n])return t[n].exports;var u=t[n]={i:n,l:!1,exports:{}};return e[n].call(u.exports,u,u.exports,r),u.l=!0,u.exports}var t={};return r.m=e,r.c=t,r.i=function(e){return e},r.d=function(e,r,t){Object.defineProperty(e,r,{configurable:!1,enumerable:!0,get:t})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},r.p="",r(r.s=1)}([function(e,r){e.exports=require("aws-sdk")},function(e,r,t){"use strict";function n(e){return function(){var r=e.apply(this,arguments);return new Promise(function(e,t){function n(u,o){try{var c=r[u](o),a=c.value}catch(e){return void t(e)}return c.done?void e(a):Promise.resolve(a).then(function(e){n("next",e)},function(e){n("throw",e)})}return n("next")})}}function u(e,r,t,u){var o=arguments.length>4&&void 0!==arguments[4]&&arguments[4];return function(){var c=n(regeneratorRuntime.mark(function n(c){var f,p=this;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return n.prev=0,n.delegateYield(regeneratorRuntime.mark(function n(){var i;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(!o){n.next=3;break}return n.next=3,s(e,r,t,u);case 3:return i=new a.a.S3({region:e,accessKeyId:r,secretAccessKey:t,params:{Bucket:u}}),n.abrupt("return",{v:new Promise(function(e,r){i.getObject({Bucket:u,Key:c},function(t,n){return t&&404===t.statusCode?e(""):t?r(t):e(n.Body.toString())})})});case 5:case"end":return n.stop()}},n,p)})(),"t0",2);case 2:if(f=n.t0,"object"!==("undefined"==typeof f?"undefined":i(f))){n.next=5;break}return n.abrupt("return",f.v);case 5:n.next=10;break;case 7:n.prev=7,n.t1=n.catch(0),console.log(n.t1);case 10:case"end":return n.stop()}},n,this,[[0,7]])}));return function(e){return c.apply(this,arguments)}}()}function o(e,r,t,u){var o=arguments.length>4&&void 0!==arguments[4]&&arguments[4];return function(){var c=n(regeneratorRuntime.mark(function n(c,f){var p,v=this;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return n.prev=0,n.delegateYield(regeneratorRuntime.mark(function n(){var i;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(!o){n.next=3;break}return n.next=3,s(e,r,t,u);case 3:return i=new a.a.S3({region:e,accessKeyId:r,secretAccessKey:t,params:{Bucket:u,Key:c}}),n.abrupt("return",{v:new Promise(function(e,r){i.upload({Body:f},function(t,n){return t?r(t):void e(n)})})});case 5:case"end":return n.stop()}},n,v)})(),"t0",2);case 2:if(p=n.t0,"object"!==("undefined"==typeof p?"undefined":i(p))){n.next=5;break}return n.abrupt("return",p.v);case 5:n.next=10;break;case 7:n.prev=7,n.t1=n.catch(0),console.log(n.t1);case 10:case"end":return n.stop()}},n,this,[[0,7]])}));return function(e,r){return c.apply(this,arguments)}}()}var c=t(0),a=t.n(c);r.readS3=u,r.writeS3=o,t.d(r,"createS3Bucket",function(){return s});var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s=function(){var e=n(regeneratorRuntime.mark(function e(r,t,n,u){var o;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(e.prev=0,o=function(){var e=new a.a.S3({region:r,accessKeyId:t,secretAccessKey:n,params:{Bucket:u}});return{v:new Promise(function(r){return e.createBucket(r)})}}(),"object"!==("undefined"==typeof o?"undefined":i(o))){e.next=4;break}return e.abrupt("return",o.v);case 4:e.next=9;break;case 6:e.prev=6,e.t0=e.catch(0),console.log(e.t0);case 9:case"end":return e.stop()}},e,this,[[0,6]])}));return function(r,t,n,u){return e.apply(this,arguments)}}()}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,